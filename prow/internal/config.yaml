plank:
  job_url_template: 'https://gubernator-internal.googleplex.com/build/{{with .Spec.Refs}}{{if eq .Org "knative"}}knative-prow{{else}}gke-prow{{end}}{{else}}{{if eq (printf "%.10s" .Spec.Job) "ci-knative"}}knative-prow{{else}}gke-prow{{end}}{{end}}/{{if or (eq .Spec.Type "presubmit") (eq .Spec.Type "batch")}}pr-logs/pull{{with .Spec.Refs}}/{{.Org}}_{{.Repo}}{{end}}{{else}}logs{{end}}{{if eq .Spec.Type "presubmit"}}/{{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}{{else if eq .Spec.Type "batch"}}/batch{{end}}/{{.Spec.Job}}/{{.Status.BuildID}}/'
  report_template: '[Full PR test history](https://gubernator-internal.googleplex.com/pr/{{if eq .Spec.Refs.Org "kubernetes"}}{{if eq .Spec.Refs.Repo "kubernetes"}}{{else}}{{.Spec.Refs.Repo}}/{{end}}{{else}}{{.Spec.Refs.Org}}_{{.Spec.Refs.Repo}}/{{end}}{{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}). [Your PR dashboard](https://gubernator-internal.googleplex.com/pr/{{with index .Spec.Refs.Pulls 0}}{{.Author}}{{end}}).'
  pod_pending_timeout: 60m
  default_decoration_config:
    timeout: 7200000000000 # 2h
    grace_period: 15000000000 # 15s
    utility_images:
      clonerefs: "gcr.io/k8s-prow/clonerefs@sha256:b62ba1f379ac19c5ec9ee7bcab14d3f0b3c31cea9cdd4bc491e98e2c5f346c07"
      initupload: "gcr.io/k8s-prow/initupload@sha256:58f89f2aae68f7dc46aaf05c7e8204c4f26b53ec9ce30353d1c27ce44a60d121"
      entrypoint: "gcr.io/k8s-prow/entrypoint:v20180512-0255926d1"
      sidecar: "gcr.io/k8s-prow/sidecar@sha256:8807b2565f4d2699920542fcf890878824b1ede4198d7ff46bca53feb064ed44"
    gcs_configuration:
      bucket: "knative-prow"
      path_strategy: "explicit"
    gcs_credentials_secret: "service-account"

prowjob_namespace: default
pod_namespace: test-pods
log_level: info

branch-protection:
  orgs:
    knative:
      # Protect all branches in knative
      # This means all prow jobs with "always_run" set are required
      # to pass before tide can merge the PR.
      # Currently this is manually enabled by the knative org admins,
      # but it's stated here for documentation and reference purposes.
      protect: true
      # Admins can overrule checks
      enforce_admins: false

tide:
  queries:
  - repos:
    - GoogleCloudPlatform/k8s-tpu-operator
    - knative/build
    - knative/build-templates
    - knative/serving
    - knative/eventing
    - knative/docs
    - knative/test-infra
    labels:
    - lgtm
    - approved
    missingLabels:
    - do-not-merge/hold
    - do-not-merge/work-in-progress
  merge_method:
    knative: squash
  target_url: https://prow-internal.gcpnode.com/tide.html

presets:
- labels:
    preset-service-account: "true"
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/service-account/service-account.json
  volumes:
  - name: service
    secret:
      secretName: service-account
  volumeMounts:
  - name: service
    mountPath: /etc/service-account
    readOnly: true
- labels:
    preset-k8s-ssh: "true"
  env:
  - name: USER
    value: prow
  - name: JENKINS_GCE_SSH_PRIVATE_KEY_FILE
    value: /etc/ssh-key-secret/ssh-private
  - name: JENKINS_GCE_SSH_PUBLIC_KEY_FILE
    value: /etc/ssh-key-secret/ssh-public
  volumes:
  - name: ssh
    secret:
      defaultMode: 0400
      secretName: ssh-key-secret
  volumeMounts:
  - name: ssh
    mountPath: /etc/ssh-key-secret
    readOnly: true
# storage / caching presets
- labels:
    preset-bazel-scratch-dir: "true"
  env:
  - name: TEST_TMPDIR
    value: /bazel-scratch/.cache/bazel
  volumes:
  - name: bazel-scratch
    emptyDir: {}
  volumeMounts:
  - name: bazel-scratch
    mountPath: /bazel-scratch/.cache
- labels:
    preset-bazel-remote-cache-enabled: "true"
  env:
  - name: BAZEL_REMOTE_CACHE_ENABLED
    value: "true"

presubmits:
  knative/serving:
  - name: pull-knative-serving-build-tests
    agent: kubernetes
    context: pull-knative-serving-build-tests
    always_run: true
    rerun_command: "/test pull-knative-serving-build-tests"
    trigger: "(?m)^/test (all|pull-knative-serving-build-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  - name: pull-knative-serving-unit-tests
    agent: kubernetes
    context: pull-knative-serving-unit-tests
    always_run: true
    rerun_command: "/test pull-knative-serving-unit-tests"
    trigger: "(?m)^/test (all|pull-knative-serving-unit-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  - name: pull-knative-serving-integration-tests
    agent: kubernetes
    context: pull-knative-serving-integration-tests
    always_run: true
    rerun_command: "/test pull-knative-serving-integration-tests"
    trigger: "(?m)^/test (all|pull-knative-serving-integration-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  - name: pull-knative-serving-go-coverage
    labels:
      preset-service-account: "true"
    agent: kubernetes
    context: pull-knative-serving-go-coverage
    always_run: true
    rerun_command: "/test pull-knative-serving-go-coverage"
    trigger: "(?m)^/test (all|pull-knative-serving-go-coverage),?(\\s+|$)"
    optional: true
    decorate: true
    clone_uri: "git@github.com:knative/serving.git"
    ssh_key_secrets:
    - ssh-knative
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--postsubmit-gcs-bucket=knative-prow"
        - "--postsubmit-job-name=post-knative-serving-go-coverage"
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=./pkg/"
        - "--cov-threshold-percentage=50"
        - "--github-token=/etc/github-token/token"
        volumeMounts:
        - name: github-token
          mountPath: /etc/github-token
          readOnly: true
      volumes:
      - name: github-token
        secret:
          secretName: covbot-token

  - name: pull-knative-serving-go-coverage-dev
    labels:
      preset-service-account: "true"
    agent: kubernetes
    context: pull-knative-serving-go-coverage-dev
    always_run: false
    rerun_command: "/test pull-knative-serving-go-coverage-dev"
    trigger: "(?m)^/test (pull-knative-serving-go-coverage-dev),?(\\s+|$)"
    optional: true
    decorate: true
    clone_uri: "git@github.com:knative/serving.git"
    ssh_key_secrets:
    - ssh-knative
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/coverage-dev:latest-dev
        imagePullPolicy: Always
        securityContext:
          runAsNonRoot: true
        command:
        - "/coverage"
        args:
        - "--postsubmit-gcs-bucket=knative-prow"
        - "--postsubmit-job-name=post-knative-serving-go-coverage"
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=./pkg/"
        - "--cov-threshold-percentage=81"
        - "--github-token=/etc/github-token/token"
        volumeMounts:
        - name: github-token
          mountPath: /etc/github-token
          readOnly: true
      volumes:
      - name: github-token
        secret:
          secretName: covbot-token

  knative/build:
  - name: pull-knative-build-go-coverage
    labels:
      preset-service-account: "true"
    agent: kubernetes
    context: pull-knative-build-go-coverage
    always_run: true
    rerun_command: "/test pull-knative-build-go-coverage"
    trigger: "(?m)^/test (all|pull-knative-build-go-coverage),?(\\s+|$)"
    optional: true
    decorate: true
    clone_uri: "git@github.com:knative/build.git"
    ssh_key_secrets:
    - ssh-knative
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--postsubmit-gcs-bucket=knative-prow"
        - "--postsubmit-job-name=post-knative-build-go-coverage"
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=./pkg/"
        - "--cov-threshold-percentage=50"
        - "--github-token=/etc/github-token/token"
        volumeMounts:
        - name: github-token
          mountPath: /etc/github-token
          readOnly: true
      volumes:
      - name: github-token
        secret:
          secretName: covbot-token

  - name: pull-knative-build-build-tests
    agent: kubernetes
    context: pull-knative-build-build-tests
    always_run: true
    rerun_command: "/test pull-knative-build-build-tests"
    trigger: "(?m)^/test (all|pull-knative-build-build-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  - name: pull-knative-build-unit-tests
    agent: kubernetes
    context: pull-knative-build-unit-tests
    always_run: true
    rerun_command: "/test pull-knative-build-unit-tests"
    trigger: "(?m)^/test (all|pull-knative-build-unit-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  - name: pull-knative-build-integration-tests
    agent: kubernetes
    context: pull-knative-build-integration-tests
    always_run: true
    rerun_command: "/test pull-knative-build-integration-tests"
    trigger: "(?m)^/test (all|pull-knative-build-integration-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  knative/eventing:
  - name: pull-knative-eventing-go-coverage
    labels:
      preset-service-account: "true"
    agent: kubernetes
    context: pull-knative-eventing-go-coverage
    always_run: true
    rerun_command: "/test pull-knative-eventing-go-coverage"
    trigger: "(?m)^/test (all|pull-knative-eventing-go-coverage),?(\\s+|$)"
    optional: true
    decorate: true
    clone_uri: "git@github.com:knative/eventing.git"
    ssh_key_secrets:
    - ssh-knative
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--postsubmit-gcs-bucket=knative-prow"
        - "--postsubmit-job-name=post-knative-eventing-go-coverage"
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=./pkg/"
        - "--cov-threshold-percentage=50"
        - "--github-token=/etc/github-token/token"
        volumeMounts:
        - name: github-token
          mountPath: /etc/github-token
          readOnly: true
      volumes:
      - name: github-token
        secret:
          secretName: covbot-token

  - name: pull-knative-eventing-build-tests
    agent: kubernetes
    context: pull-knative-eventing-build-tests
    always_run: true
    rerun_command: "/test pull-knative-eventing-build-tests"
    trigger: "(?m)^/test (all|pull-knative-eventing-build-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  - name: pull-knative-eventing-unit-tests
    agent: kubernetes
    context: pull-knative-eventing-unit-tests
    always_run: true
    rerun_command: "/test pull-knative-eventing-unit-tests"
    trigger: "(?m)^/test (all|pull-knative-eventing-unit-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  - name: pull-knative-eventing-integration-tests
    agent: kubernetes
    context: pull-knative-eventing-integration-tests
    always_run: true
    rerun_command: "/test pull-knative-eventing-integration-tests"
    trigger: "(?m)^/test (all|pull-knative-eventing-integration-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  knative/docs:

  - name: pull-knative-docs-go-coverage
    labels:
      preset-service-account: "true"
    agent: kubernetes
    context: pull-knative-docs-go-coverage
    always_run: true
    rerun_command: "/test pull-knative-docs-go-coverage"
    trigger: "(?m)^/test (all|pull-knative-docs-go-coverage),?(\\s+|$)"
    optional: true
    decorate: true
    clone_uri: "git@github.com:knative/docs.git"
    ssh_key_secrets:
    - ssh-knative
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--postsubmit-gcs-bucket=knative-prow"
        - "--postsubmit-job-name=post-knative-docs-go-coverage"
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=./pkg/"
        - "--cov-threshold-percentage=50"
        - "--github-token=/etc/github-token/token"
        volumeMounts:
        - name: github-token
          mountPath: /etc/github-token
          readOnly: true
      volumes:
      - name: github-token
        secret:
          secretName: covbot-token

  - name: pull-knative-docs-build-tests
    agent: kubernetes
    context: pull-knative-docs-build-tests
    always_run: true
    rerun_command: "/test pull-knative-docs-build-tests"
    trigger: "(?m)^/test (all|pull-knative-docs-build-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  - name: pull-knative-docs-unit-tests
    agent: kubernetes
    context: pull-knative-docs-unit-tests
    always_run: true
    rerun_command: "/test pull-knative-docs-unit-tests"
    trigger: "(?m)^/test (all|pull-knative-docs-unit-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  - name: pull-knative-docs-integration-tests
    agent: kubernetes
    context: pull-knative-docs-integration-tests
    always_run: true
    rerun_command: "/test pull-knative-docs-integration-tests"
    trigger: "(?m)^/test (all|pull-knative-docs-integration-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  knative/build-templates:
  - name: pull-knative-build-templates-build-tests
    agent: kubernetes
    context: pull-knative-build-templates-build-tests
    always_run: true
    rerun_command: "/test pull-knative-build-templates-build-tests"
    trigger: "(?m)^/test (all|pull-knative-build-templates-build-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  - name: pull-knative-build-templates-unit-tests
    agent: kubernetes
    context: pull-knative-build-templates-unit-tests
    always_run: true
    rerun_command: "/test pull-knative-build-templates-unit-tests"
    trigger: "(?m)^/test (all|pull-knative-build-templates-unit-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  - name: pull-knative-build-templates-integration-tests
    agent: kubernetes
    context: pull-knative-build-templates-integration-tests
    always_run: true
    rerun_command: "/test pull-knative-build-templates-integration-tests"
    trigger: "(?m)^/test (all|pull-knative-build-templates-integration-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  knative/test-infra:
  - name: pull-knative-test-infra-build-tests
    agent: kubernetes
    context: pull-knative-test-infra-build-tests
    always_run: true
    rerun_command: "/test pull-knative-test-infra-build-tests"
    trigger: "(?m)^/test (all|pull-knative-test-infra-build-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--build-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  - name: pull-knative-test-infra-unit-tests
    agent: kubernetes
    context: pull-knative-test-infra-unit-tests
    always_run: true
    rerun_command: "/test pull-knative-test-infra-unit-tests"
    trigger: "(?m)^/test (all|pull-knative-test-infra-unit-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--unit-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  - name: pull-knative-test-infra-integration-tests
    agent: kubernetes
    context: pull-knative-test-infra-integration-tests
    always_run: true
    rerun_command: "/test pull-knative-test-infra-integration-tests"
    trigger: "(?m)^/test (all|pull-knative-test-infra-integration-tests),?(\\s+|$)"
    labels:
      preset-service-account: "true"
      preset-bazel-scratch-dir: "true"
      preset-bazel-remote-cache-enabled: "true"
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/prow-tests:latest
        imagePullPolicy: Always
        args:
        - "--ssh=/etc/ssh-knative/ssh-knative"
        - "--scenario=kubernetes_execute_bazel"
        - "--clean"
        - "--job=$(JOB_NAME)"
        - "--repo=github.com/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)"
        - "--root=/go/src"
        - "--service-account=/etc/service-account/service-account.json"
        - "--upload=gs://knative-prow/pr-logs"
        - "--" # end bootstrap args, scenario args below
        - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
        - "./test/presubmit-tests.sh"
        - "--integration-tests"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "1Gi"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 256
          secretName: ssh-knative

  GoogleCloudPlatform/k8s-tpu-operator:
  - name: pull-k8s-tpu-operator-unit
    agent: kubernetes
    context: pull-k8s-tpu-operator-unit
    always_run: true
    rerun_command: /test pull-k8s-tpu-operator-unit
    trigger: (?m)^/test (all|pull-k8s-tpu-operator-unit),?(\s+|$)
    labels:
      preset-service-account: "true"
    spec:
      containers:
      - image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master
        args:
        - --clean
        - --repo=github.com/GoogleCloudPlatform/$(REPO_NAME)=$(PULL_REFS)
        - --service-account=/etc/service-account/service-account.json
        - --upload=gs://gke-prow/pr-logs
        - --ssh=/etc/tpu-ssh/ssh-knative
        - --scenario=execute
        - -- # end bootstrap args, scenario args below
        - make
        - test
        env:
        - name: DOCKER_IN_DOCKER_ENABLED
          value: "true"
        # docker-in-docker needs privileged mode
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/tpu-ssh
          name: tpu-ssh
        - mountPath: /docker-graph
          name: docker-graph
      volumes:
      - name: tpu-ssh
        secret:
          defaultMode: 0400
          secretName: ssh-knative
      - name: docker-graph
        emptyDir: {}
  - name: pull-k8s-tpu-operator-verify
    agent: kubernetes
    context: pull-k8s-tpu-operator-verify
    always_run: true
    rerun_command: /test pull-k8s-tpu-operator-verify
    trigger: (?m)^/test (all|pull-k8s-tpu-operator-verify),?(\s+|$)
    labels:
      preset-service-account: "true"
    spec:
      containers:
      - image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master
        args:
        - --clean
        - --repo=github.com/GoogleCloudPlatform/$(REPO_NAME)=$(PULL_REFS)
        - --service-account=/etc/service-account/service-account.json
        - --upload=gs://gke-prow/pr-logs
        - --ssh=/etc/tpu-ssh/ssh-knative
        - --scenario=execute
        - -- # end bootstrap args, scenario args below
        - make
        - verify
        env:
        - name: DOCKER_IN_DOCKER_ENABLED
          value: "true"
        # docker-in-docker needs privileged mode
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/tpu-ssh
          name: tpu-ssh
        - mountPath: /docker-graph
          name: docker-graph
      volumes:
      - name: tpu-ssh
        secret:
          defaultMode: 0400
          secretName: ssh-knative
      - name: docker-graph
        emptyDir: {}

  googleprivate/ml:
  - name: mlpipeline-presubmit-e2e-test
    agent: kubernetes
    context: mlpipeline-presubmit-e2e-test
    always_run: true
    skip_report: false
    rerun_command: /test mlpipeline-presubmit-e2e-test
    trigger: (?m)^/test (all|mlpipeline-presubmit-e2e-test),?(\s+|$)
    labels:
      preset-service-account: "true"
    spec:
      containers:
      - image: gcr.io/ml-pipeline/test-worker:v20180711-cb64c3d-e3b0c4
        args:
        - --clean
        - --repo=github.com/googleprivate/$(REPO_NAME)=$(PULL_REFS)
        - --service-account=/etc/service-account/service-account.json
        - --upload=gs://gke-prow/pr-logs
        - --ssh=/etc/ssh-knative/ssh-knative
        - --scenario=execute
        - -- # end bootstrap args, scenario args below
        - -- # end kubernetes_execute_bazel flags (consider following flags as text)
        - ./test/presubmit-tests.sh
        - "--workflow_file"
        - "integration_test_gke.yaml"
        - "--test_result_folder"
        - "api_integration_test"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 0400
          secretName: ssh-knative
  - name: mlpipeline-presubmit-unit-test
    agent: kubernetes
    context: mlpipeline-presubmit-unit-test
    always_run: true
    skip_report: false
    rerun_command: /test mlpipeline-presubmit-unit-test
    trigger: (?m)^/test (all|mlpipeline-presubmit-unit-test),?(\s+|$)
    labels:
      preset-service-account: "true"
    spec:
      containers:
      - image: gcr.io/ml-pipeline/test-worker:v20180711-cb64c3d-e3b0c4
        args:
        - --clean
        - --repo=github.com/googleprivate/$(REPO_NAME)=$(PULL_REFS)
        - --service-account=/etc/service-account/service-account.json
        - --upload=gs://gke-prow/pr-logs
        - --ssh=/etc/ssh-knative/ssh-knative
        - --scenario=execute
        - -- # end bootstrap args, scenario args below
        - -- # end kubernetes_execute_bazel flags (consider following flags as text)
        - ./test/presubmit-tests.sh
        - "--workflow_file"
        - "unit_test_gke.yaml"
        - "--test_result_folder"
        - "backend_unit_test"
        volumeMounts:
        - mountPath: /etc/ssh-knative
          name: ssh-knative
      volumes:
      - name: ssh-knative
        secret:
          defaultMode: 0400
          secretName: ssh-knative

periodics:
- cron: "1 * * * *" # Run every hour and one minute
  name: ci-knative-serving-continuous
  agent: kubernetes
  labels:
    preset-service-account: "true"
    preset-bazel-scratch-dir: "true"
    preset-bazel-remote-cache-enabled: "true"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/prow-tests:latest
      imagePullPolicy: Always
      args:
      - "--ssh=/etc/ssh-knative/ssh-knative"
      - "--scenario=kubernetes_execute_bazel"
      - "--clean"
      - "--job=$(JOB_NAME)"
      - "--repo=github.com/knative/serving"
      - "--root=/go/src"
      - "--service-account=/etc/service-account/service-account.json"
      - "--upload=gs://knative-prow/logs"
      - "--timeout=50" # Avoid overrun
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "./test/presubmit-tests.sh"
      - "--all-tests"
      - "--emit-metrics"
      # Bazel needs privileged mode in order to sandbox builds.
      securityContext:
        privileged: true
      resources:
        requests:
          memory: "1Gi"
      volumeMounts:
      - mountPath: /etc/ssh-knative
        name: ssh-knative
    volumes:
     - name: ssh-knative
       secret:
         defaultMode: 256
         secretName: ssh-knative
- cron: "1 8 * * *" # Run at 01:01PST every day (08:01 UTC)
  name: ci-knative-serving-release
  agent: kubernetes
  labels:
    preset-service-account: "true"
    preset-bazel-scratch-dir: "true"
    preset-bazel-remote-cache-enabled: "true"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/prow-tests:latest
      imagePullPolicy: Always
      args:
      - "--ssh=/etc/ssh-knative/ssh-knative"
      - "--scenario=kubernetes_execute_bazel"
      - "--clean"
      - "--job=$(JOB_NAME)"
      - "--repo=github.com/knative/serving"
      - "--root=/go/src"
      - "--service-account=/etc/service-account/service-account.json"
      - "--upload=gs://knative-prow/logs"
      - "--timeout=90" # 1.5h
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "./hack/release.sh"
      - "--publish"
      - "--tag-release"
      # Bazel needs privileged mode in order to sandbox builds.
      securityContext:
        privileged: true
      resources:
        requests:
          memory: "1Gi"
      volumeMounts:
      - mountPath: /etc/ssh-knative
        name: ssh-knative
    volumes:
     - name: ssh-knative
       secret:
         defaultMode: 256
         secretName: ssh-knative
- cron: "1 9 * * 6" # Run at 02:01PST every Saturday (09:01 UTC)
  name: ci-knative-serving-playground
  agent: kubernetes
  labels:
    preset-service-account: "true"
    preset-bazel-scratch-dir: "true"
    preset-bazel-remote-cache-enabled: "true"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/prow-tests:latest
      imagePullPolicy: Always
      args:
      - "--ssh=/etc/ssh-knative/ssh-knative"
      - "--scenario=kubernetes_execute_bazel"
      - "--clean"
      - "--job=$(JOB_NAME)"
      - "--repo=github.com/knative/serving"
      - "--root=/go/src"
      - "--service-account=/etc/service-account/service-account.json"
      - "--upload=gs://knative-prow/logs"
      - "--timeout=90" # 1.5h
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "./hack/deploy.sh"
      - "knative-playground"
      # Bazel needs privileged mode in order to sandbox builds.
      securityContext:
        privileged: true
      resources:
        requests:
          memory: "1Gi"
      volumeMounts:
      - mountPath: /etc/ssh-knative
        name: ssh-knative
    volumes:
     - name: ssh-knative
       secret:
         defaultMode: 256
         secretName: ssh-knative

- cron: "5 8 * * *" # Run at 01:05PST every day (08:05 UTC)
  name: ci-knative-serving-latency
  agent: kubernetes
  labels:
    preset-service-account: "true"
  decorate: true
  ssh_key_secrets:
  - ssh-knative
  extra_refs:
  - org: knative
    repo: serving
    base_ref: master
    clone_uri: "git@github.com:knative/serving.git"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/metrics:latest
      imagePullPolicy: Always
      command:
      - "/metrics"
      args:
      - "--artifacts-dir=$(ARTIFACTS)"
      - "--service-account=/etc/service-account/service-account.json"

- cron: "0 1 * * *" # Run at 01:00 every day
  name: ci-knative-eventing-go-coverage
  agent: kubernetes
  decorate: true
  ssh_key_secrets:
  - ssh-knative
  extra_refs:
  - org: knative
    repo: eventing
    base_ref: master
    clone_uri: "git@github.com:knative/eventing.git"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/coverage:latest
      imagePullPolicy: Always
      command:
      - "/coverage"
      args:
      - "--artifacts=$(ARTIFACTS)"
      - "--profile-name=coverage_profile.txt"
      - "--cov-target=./pkg/"
      - "--cov-threshold-percentage=80"

- cron: "0 1 * * *" # Run at 01:00 every day
  name: ci-knative-serving-go-coverage
  agent: kubernetes
  decorate: true
  ssh_key_secrets:
  - ssh-knative
  extra_refs:
  - org: knative
    repo: serving
    base_ref: master
    clone_uri: "git@github.com:knative/serving.git"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/coverage:latest
      imagePullPolicy: Always
      command:
      - "/coverage"
      args:
      - "--artifacts=$(ARTIFACTS)"
      - "--profile-name=coverage_profile.txt"
      - "--cov-target=./pkg/"
      - "--cov-threshold-percentage=80"

- cron: "0 1 * * *" # Run at 01:00 every day
  name: ci-knative-build-go-coverage
  agent: kubernetes
  decorate: true
  ssh_key_secrets:
  - ssh-knative
  extra_refs:
  - org: knative
    repo: build
    base_ref: master
    clone_uri: "git@github.com:knative/build.git"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/coverage:latest
      imagePullPolicy: Always
      command:
      - "/coverage"
      args:
      - "--artifacts=$(ARTIFACTS)"
      - "--profile-name=coverage_profile.txt"
      - "--cov-target=./pkg/"
      - "--cov-threshold-percentage=80"

- cron: "0 1 * * *" # Run at 01:00 every day
  name: ci-knative-docs-go-coverage
  agent: kubernetes
  decorate: true
  ssh_key_secrets:
  - ssh-knative
  extra_refs:
  - org: knative
    repo: docs
    base_ref: master
    clone_uri: "git@github.com:knative/docs.git"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/coverage:latest
      imagePullPolicy: Always
      command:
      - "/coverage"
      args:
      - "--artifacts=$(ARTIFACTS)"
      - "--profile-name=coverage_profile.txt"
      - "--cov-target=./pkg/"
      - "--cov-threshold-percentage=80"


- cron: "15 * * * *" # Run every hour and 15 minutes
  name: ci-knative-build-continuous
  agent: kubernetes
  labels:
    preset-service-account: "true"
    preset-bazel-scratch-dir: "true"
    preset-bazel-remote-cache-enabled: "true"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/prow-tests:latest
      imagePullPolicy: Always
      args:
      - "--ssh=/etc/ssh-knative/ssh-knative"
      - "--scenario=kubernetes_execute_bazel"
      - "--clean"
      - "--job=$(JOB_NAME)"
      - "--repo=github.com/knative/build"
      - "--root=/go/src"
      - "--service-account=/etc/service-account/service-account.json"
      - "--upload=gs://knative-prow/logs"
      - "--timeout=50" # Avoid overrun
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "./test/presubmit-tests.sh"
      - "--all-tests"
      # Bazel needs privileged mode in order to sandbox builds.
      securityContext:
        privileged: true
      resources:
        requests:
          memory: "1Gi"
      volumeMounts:
      - mountPath: /etc/ssh-knative
        name: ssh-knative
    volumes:
     - name: ssh-knative
       secret:
         defaultMode: 256
         secretName: ssh-knative
- cron: "31 8 * * *" # Run at 01:31PST every day (08:31 UTC)
  name: ci-knative-build-release
  agent: kubernetes
  labels:
    preset-service-account: "true"
    preset-bazel-scratch-dir: "true"
    preset-bazel-remote-cache-enabled: "true"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/prow-tests:latest
      imagePullPolicy: Always
      args:
      - "--ssh=/etc/ssh-knative/ssh-knative"
      - "--scenario=kubernetes_execute_bazel"
      - "--clean"
      - "--job=$(JOB_NAME)"
      - "--repo=github.com/knative/build"
      - "--root=/go/src"
      - "--service-account=/etc/service-account/service-account.json"
      - "--upload=gs://knative-prow/logs"
      - "--timeout=90" # 1.5h
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "./hack/release.sh"
      - "--publish"
      - "--tag-release"
      # Bazel needs privileged mode in order to sandbox builds.
      securityContext:
        privileged: true
      resources:
        requests:
          memory: "1Gi"
      volumeMounts:
      - mountPath: /etc/ssh-knative
        name: ssh-knative
    volumes:
     - name: ssh-knative
       secret:
         defaultMode: 256
         secretName: ssh-knative

- cron: "30 * * * *" # Run every hour and 30 minutes
  name: ci-knative-eventing-continuous
  agent: kubernetes
  labels:
    preset-service-account: "true"
    preset-bazel-scratch-dir: "true"
    preset-bazel-remote-cache-enabled: "true"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/prow-tests:latest
      imagePullPolicy: Always
      args:
      - "--ssh=/etc/ssh-knative/ssh-knative"
      - "--scenario=kubernetes_execute_bazel"
      - "--clean"
      - "--job=$(JOB_NAME)"
      - "--repo=github.com/knative/eventing"
      - "--root=/go/src"
      - "--service-account=/etc/service-account/service-account.json"
      - "--upload=gs://knative-prow/logs"
      - "--timeout=50" # Avoid overrun
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "./test/presubmit-tests.sh"
      - "--all-tests"
      # Bazel needs privileged mode in order to sandbox builds.
      securityContext:
        privileged: true
      resources:
        requests:
          memory: "1Gi"
      volumeMounts:
      - mountPath: /etc/ssh-knative
        name: ssh-knative
    volumes:
     - name: ssh-knative
       secret:
         defaultMode: 256
         secretName: ssh-knative
- cron: "16 9 * * *" # Run at 02:16PST every day (09:16 UTC)
  name: ci-knative-eventing-release
  agent: kubernetes
  labels:
    preset-service-account: "true"
    preset-bazel-scratch-dir: "true"
    preset-bazel-remote-cache-enabled: "true"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/prow-tests:latest
      imagePullPolicy: Always
      args:
      - "--ssh=/etc/ssh-knative/ssh-knative"
      - "--scenario=kubernetes_execute_bazel"
      - "--clean"
      - "--job=$(JOB_NAME)"
      - "--repo=github.com/knative/eventing"
      - "--root=/go/src"
      - "--service-account=/etc/service-account/service-account.json"
      - "--upload=gs://knative-prow/logs"
      - "--timeout=90" # 1.5h
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "./hack/release.sh"
      - "--publish"
      - "--tag-release"
      # Bazel needs privileged mode in order to sandbox builds.
      securityContext:
        privileged: true
      resources:
        requests:
          memory: "1Gi"
      volumeMounts:
      - mountPath: /etc/ssh-knative
        name: ssh-knative
    volumes:
     - name: ssh-knative
       secret:
         defaultMode: 256
         secretName: ssh-knative

- cron: "40 * * * *" # Run every hour and 40 minutes
  name: ci-knative-build-templates-continuous
  agent: kubernetes
  labels:
    preset-service-account: "true"
    preset-bazel-scratch-dir: "true"
    preset-bazel-remote-cache-enabled: "true"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/prow-tests:latest
      imagePullPolicy: Always
      args:
      - "--ssh=/etc/ssh-knative/ssh-knative"
      - "--scenario=kubernetes_execute_bazel"
      - "--clean"
      - "--job=$(JOB_NAME)"
      - "--repo=github.com/knative/build-templates"
      - "--root=/go/src"
      - "--service-account=/etc/service-account/service-account.json"
      - "--upload=gs://knative-prow/logs"
      - "--timeout=50" # Avoid overrun
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "./test/presubmit-tests.sh"
      - "--all-tests"
      # Bazel needs privileged mode in order to sandbox builds.
      securityContext:
        privileged: true
      resources:
        requests:
          memory: "1Gi"
      volumeMounts:
      - mountPath: /etc/ssh-knative
        name: ssh-knative
    volumes:
     - name: ssh-knative
       secret:
         defaultMode: 256
         secretName: ssh-knative
- cron: "50 * * * *" # Run every hour and 50 minutes
  name: ci-knative-docs-continuous
  agent: kubernetes
  labels:
    preset-service-account: "true"
    preset-bazel-scratch-dir: "true"
    preset-bazel-remote-cache-enabled: "true"
  spec:
    containers:
    - image: gcr.io/knative-tests/test-infra/prow-tests:latest
      imagePullPolicy: Always
      args:
      - "--ssh=/etc/ssh-knative/ssh-knative"
      - "--scenario=kubernetes_execute_bazel"
      - "--clean"
      - "--job=$(JOB_NAME)"
      - "--repo=github.com/knative/docs"
      - "--root=/go/src"
      - "--service-account=/etc/service-account/service-account.json"
      - "--upload=gs://knative-prow/logs"
      - "--timeout=50" # Avoid overrun
      - "--" # end bootstrap args, scenario args below
      - "--" # end kubernetes_execute_bazel flags (consider following flags as text)
      - "./test/presubmit-tests.sh"
      - "--all-tests"
      # Bazel needs privileged mode in order to sandbox builds.
      securityContext:
        privileged: true
      resources:
        requests:
          memory: "1Gi"
      volumeMounts:
      - mountPath: /etc/ssh-knative
        name: ssh-knative
    volumes:
     - name: ssh-knative
       secret:
         defaultMode: 256
         secretName: ssh-knative

- interval: 1h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-ci-master
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-canary/latest
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.skip=\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=50m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 2h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-ci-serial-master
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-canary/latest
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Serial\]|\[Disruptive\] --ginkgo.skip=\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=300m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 2h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-ci-slow-master
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-canary/latest
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Slow\] --ginkgo.skip=\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=150m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 2h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-ci-device-plugin-gpu-master
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-canary/latest
      - --gcp-project-type=gpu-project
      - --gcp-zone=us-west1-b
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Feature:GPUDevicePlugin\] --minStartupPods=8
      - --timeout=150m
      - --env=NODE_ACCELERATORS=type=nvidia-tesla-k80,count=2
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 30m
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-m65
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-65/latest-1.8
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.skip=\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=50m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 30m
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-m66
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-66/latest-1.9
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.skip=\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=50m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 30m
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-m67
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-67
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.skip=\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=50m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 30m
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-m68
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-68
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.skip=\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=50m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 30m
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-master
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-canary
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.skip=\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=50m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 1h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-serial-m65
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-65/latest-1.8
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Serial\]|\[Disruptive\] --ginkgo.skip=\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=300m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 1h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-serial-m66
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-66/latest-1.9
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Serial\]|\[Disruptive\] --ginkgo.skip=\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=300m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 1h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-serial-m67
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-67
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Serial\]|\[Disruptive\] --ginkgo.skip=\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=300m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 1h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-serial-m68
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-68
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Serial\]|\[Disruptive\] --ginkgo.skip=\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=300m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 1h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-serial-master
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-canary
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Serial\]|\[Disruptive\] --ginkgo.skip=\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=300m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 2h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-slow-m65
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-65/latest-1.8
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Slow\] --ginkgo.skip=\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=150m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 2h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-slow-m66
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-66/latest-1.9
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Slow\] --ginkgo.skip=\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=150m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 2h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-slow-m67
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-67
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Slow\] --ginkgo.skip=\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=150m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 2h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-slow-m68
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-68
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Slow\] --ginkgo.skip=\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=150m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 2h
  agent: kubernetes
  name: ci-kubernetes-e2e-gce-gci-qa-slow-master
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-canary
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Slow\] --ginkgo.skip=\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=150m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

# COS Docker validation tests.
- interval: 1h
  agent: kubernetes
  name: ci-kubernetes-e2e-cos-docker-validation
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-next-canary
      - --gcp-master-image=gci
      - --gcp-node-image=gci
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.skip=\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=50m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 1h
  agent: kubernetes
  name: ci-kubernetes-e2e-cos-docker-validation-serial
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-next-canary
      - --gcp-master-image=gci
      - --gcp-node-image=gci
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Serial\]|\[Disruptive\] --ginkgo.skip=\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=300m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 1h
  agent: kubernetes
  name: ci-kubernetes-e2e-cos-docker-validation-slow
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --check-leaked-resources
      - --extract=gci/gci-next-canary
      - --gcp-master-image=gci
      - --gcp-node-image=gci
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=25
      - --provider=gce
      - --test_args=--ginkgo.focus=\[Slow\] --ginkgo.skip=\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --minStartupPods=8
      - --timeout=150m
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 12h
  agent: kubernetes
  name: ci-kubernetes-soak-cos-docker-validation
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - args:
      - --timeout=70
      - --bare
      - --scenario=kubernetes_e2e
      - --upload=gs://gke-prow/logs
      - --
      - --down=false
      - --env=DOCKER_TEST_LOG_LEVEL=--log-level=warn
      - --extract=gci/gci-next-canary
      - --gcp-master-image=gci
      - --gcp-node-image=gci
      - --gcp-project-type=gci-qa-project
      - --gcp-zone=us-central1-f
      - --provider=gce
      - --save=gs://gke-prow/soak/ci-kubernetes-soak-cos-docker-validation
      - --soak
      - --test_args=--ginkgo.skip=\[Disruptive\]|\[Flaky\]|\[Feature:.+\] --clean-start=true --minStartupPods=8
      - --timeout=600m
      - --up=false
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- interval: 6h
  agent: kubernetes
  name: ci-gke-guitar-projects-janitor
  labels:
    preset-service-account: "true"
  spec:
    containers:
    - args:
      - --timeout=150
      - --bare
      - --scenario=kubernetes_janitor
      - --upload=gs://gke-prow/logs
      - --
      - --mode=custom
      # TODO(senlu): figure out a way to sync the project list
      - |-
        --projects=cloud-kubernetes-test-guitar,
                  cloud-kubernetes-test-guitar-1,
                  cloud-kubernetes-test-guitar-2,
                  cloud-kubernetes-test-guitar-3,
                  cloud-kubernetes-test-guitar-4,
                  cloud-kubernetes-test-guitar-5,
                  cloud-kubernetes-test-guitar-6,
                  cloud-kubernetes-test-guitar-7,
                  cloud-kubernetes-test-guitar-8,
                  cloud-kubernetes-test-guitar-9,
                  cloud-kubernetes-guitar-10,
                  cloud-kubernetes-guitar-11,
                  cloud-kubernetes-guitar-12,
                  cloud-kubernetes-guitar-13,
                  cloud-kubernetes-guitar-14,
                  cloud-kubernetes-guitar-15,
                  cloud-kubernetes-guitar-16,
                  cloud-kubernetes-guitar-17,
                  cloud-kubernetes-guitar-18,
                  cloud-kubernetes-guitar-19,
                  cloud-kubernetes-guitar-20,
                  cloud-kubernetes-guitar-21,
                  cloud-kubernetes-guitar-22,
                  cloud-kubernetes-guitar-23,
                  cloud-kubernetes-guitar-24,
                  cloud-kubernetes-guitar-25,
                  cloud-kubernetes-guitar-26,
                  cloud-kubernetes-guitar-27,
                  cloud-kubernetes-guitar-28,
                  cloud-kubernetes-guitar-29,
                  cloud-k8s-guitar-xpn-host,
                  cloud-k8s-guitar-xpn-svc-1,
                  cloud-k8s-guitar-xpn-svc-2,
                  gke-e2e-binauthz-prod,
                  gke-e2e-binauthz-test,
                  gke-e2e-createdelete,
                  gke-e2e-guitar-accelerators-1,
                  gke-e2e-guitar-accelerators-2,
                  gke-e2e-guitar-accelerators-3,
                  gke-e2e-jenkins-oneoff,
                  gke-e2e-pull-config,
                  gke-e2e-regional-createdelete,
                  gke-gcestaging-e2e
      - --age=240 # 10 days for guitar projects
      image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master

- name: ci-runsc-build
  interval: 30m
  agent: kubernetes
  labels:
    preset-service-account: "true"
  spec:
    containers:
    - image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-experimental
      args:
      - --repo=github.com/google/gvisor=master
      - --repo=github.com/Random-Liu/runsc-scripts=master
      - --root=/go/src
      - --upload=gs://gke-prow/logs
      - --scenario=execute
      - --
      - /go/src/github.com/Random-Liu/runsc-scripts/build.sh

- interval: 1h
  agent: kubernetes
  name: ci-containerd-runsc-node-e2e
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master
      args:
      - --repo=k8s.io/kubernetes
      - --repo=github.com/containerd/cri=master
      - --repo=github.com/Random-Liu/runsc-scripts=master
      - --root=/go/src
      - --upload=gs://gke-prow/logs
      - --scenario=kubernetes_e2e
      - --timeout=90
      - --
      - --node-args=--image-config-file=/go/src/github.com/Random-Liu/runsc-scripts/image-config.yaml
      - --deployment=node
      - --gcp-project=cri-containerd-node-e2e
      - --gcp-zone=us-central1-f
      - '--node-test-args=--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock --container-runtime-process-name=/home/containerd/usr/local/bin/containerd --container-runtime-pid-file= --kubelet-flags="--cgroups-per-qos=true --cgroup-root=/ --runtime-cgroups=/system.slice/containerd.service" --extra-log="{\"name\": \"containerd.log\", \"journalctl\": [\"-u\", \"containerd\"]}"'
      - --node-tests=true
      - --provider=gce
      - '--test_args=--nodes=8 --focus="\[NodeConformance\]|\[NodeFeature:FSGroup\]|\[NodeFeature:\sImageID\]" --skip="\[Flaky\]|\[Serial\]" --flakeAttempts=2'
      - --timeout=65m

- interval: 1h
  agent: kubernetes
  name: ci-containerd-runsc-node-e2e-multicontainer
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master
      args:
      - --repo=k8s.io/kubernetes
      - --repo=github.com/containerd/cri=master
      - --repo=github.com/Random-Liu/runsc-scripts=master
      - --root=/go/src
      - --upload=gs://gke-prow/logs
      - --scenario=kubernetes_e2e
      - --timeout=90
      - --
      - --node-args=--image-config-file=/go/src/github.com/Random-Liu/runsc-scripts/image-config-mc.yaml
      - --deployment=node
      - --gcp-project=cri-containerd-node-e2e
      - --gcp-zone=us-central1-f
      - '--node-test-args=--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock --container-runtime-process-name=/home/containerd/usr/local/bin/containerd --container-runtime-pid-file= --kubelet-flags="--cgroups-per-qos=true --cgroup-root=/ --runtime-cgroups=/system.slice/containerd.service" --extra-log="{\"name\": \"containerd.log\", \"journalctl\": [\"-u\", \"containerd\"]}"'
      - --node-tests=true
      - --provider=gce
      - '--test_args=--nodes=8 --focus="\[NodeConformance\]|\[NodeFeature:FSGroup\]|\[NodeFeature:\sImageID\]" --skip="\[Flaky\]|\[Serial\]" --flakeAttempts=2'
      - --timeout=65m

- interval: 1h
  agent: kubernetes
  name: ci-containerd-runsc-e2e
  labels:
    preset-service-account: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master
      args:
      - --repo=github.com/containerd/cri=master
      - --repo=github.com/Random-Liu/runsc-scripts=master
      - --upload=gs://gke-prow/logs
      - --scenario=kubernetes_e2e
      - --timeout=70
      - --
      - --check-leaked-resources
      - --env=KUBE_MASTER_EXTRA_METADATA=user-data=/workspace/github.com/containerd/cri/test/e2e/master.yaml,containerd-configure-sh=/workspace/github.com/containerd/cri/cluster/gce/configure.sh,containerd-extra-init-sh=/go/src/github.com/Random-Liu/runsc-scripts/runsc-e2e-init.sh,containerd-env=/go/src/github.com/Random-Liu/runsc-scripts/env
      - --env=KUBE_NODE_EXTRA_METADATA=user-data=/workspace/github.com/containerd/cri/test/e2e/node.yaml,containerd-configure-sh=/workspace/github.com/containerd/cri/cluster/gce/configure.sh,containerd-extra-init-sh=/go/src/github.com/Random-Liu/runsc-scripts/runsc-e2e-init.sh,containerd-env=/go/src/github.com/Random-Liu/runsc-scripts/env
      - --env=STORAGE_BACKEND=etcd2
      - --env=TEST_ETCD_IMAGE=2.2.1
      - --env=TEST_ETCD_VERSION=2.2.1
      - --env=ENABLE_POD_SECURITY_POLICY=true
      - --env=LOG_DUMP_SYSTEMD_SERVICES=containerd containerd-installation
      - --env=KUBE_CONTAINER_RUNTIME=remote
      - --env=KUBE_CONTAINER_RUNTIME_ENDPOINT=unix:///run/containerd/containerd.sock
      - --env=KUBE_CONTAINER_RUNTIME_NAME=containerd
      - --env=KUBE_LOAD_IMAGE_COMMAND=/home/containerd/usr/local/bin/ctr cri load
      - --env=NETWORK_PROVIDER=
      - --env=NON_MASQUERADE_CIDR=0.0.0.0/0
      - --env=KUBELET_TEST_ARGS=--runtime-cgroups=/system.slice/containerd.service
      - --extract=ci/latest
      - --gcp-project=cri-containerd-node-e2e
      - --gcp-node-image=gci
      - --gcp-nodes=4
      - --gcp-zone=us-central1-f
      - --ginkgo-parallel=30
      - --provider=gce
      - --test_args=--ginkgo.focus=Conformance --minStartupPods=8",
      - --timeout=50m

postsubmits:
  knative/build:
  - name: post-knative-build-go-coverage
    branches:
    - master
    agent: kubernetes
    decorate: true
    clone_uri: "git@github.com:knative/build.git"
    ssh_key_secrets:
    - ssh-knative
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=./pkg/"
        - "--cov-threshold-percentage=0"

  knative/eventing:
  - name: post-knative-eventing-go-coverage
    branches:
    - master
    agent: kubernetes
    decorate: true
    clone_uri: "git@github.com:knative/eventing.git"
    ssh_key_secrets:
    - ssh-knative
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=./pkg/"
        - "--cov-threshold-percentage=0"

  knative/docs:
  - name: post-knative-docs-go-coverage
    branches:
    - master
    agent: kubernetes
    decorate: true
    clone_uri: "git@github.com:knative/docs.git"
    ssh_key_secrets:
    - ssh-knative
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=./pkg/"
        - "--cov-threshold-percentage=0"

  knative/serving:
  - name: post-knative-serving-go-coverage
    branches:
    - master
    agent: kubernetes
    decorate: true
    clone_uri: "git@github.com:knative/serving.git"
    ssh_key_secrets:
    - ssh-knative
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/coverage:latest
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=./pkg/"
        - "--cov-threshold-percentage=0"

  - name: post-knative-serving-go-coverage-dev
    branches:
    - master
    agent: kubernetes
    decorate: true
    clone_uri: "git@github.com:knative/serving.git"
    ssh_key_secrets:
    - ssh-knative
    spec:
      containers:
      - image: gcr.io/knative-tests/test-infra/coverage-dev:latest-dev
        imagePullPolicy: Always
        command:
        - "/coverage"
        args:
        - "--artifacts=$(ARTIFACTS)"
        - "--profile-name=coverage_profile.txt"
        - "--cov-target=./pkg/"
        - "--cov-threshold-percentage=0"


  GoogleCloudPlatform/k8s-tpu-operator:
  - name: k8s-tpu-operator-image-push
    agent: kubernetes
    branches:
    - master
    - release-0.0
    labels:
      preset-service-account: "true"
      preset-k8s-ssh: "true"
    spec:
      containers:
      - image: gcr.io/k8s-testimages/kubekins-e2e:v20180511-51cf02e75-master
        args:
        - --clean
        - --repo=github.com/GoogleCloudPlatform/$(REPO_NAME)=$(PULL_REFS)
        - --service-account=/etc/service-account/service-account.json
        - --upload=gs://gke-prow/logs
        - --ssh=/etc/tpu-ssh/ssh-knative
        - --scenario=execute
        - -- # end bootstrap args, scenario args below
        - make
        - push
        env:
        - name: DOCKER_IN_DOCKER_ENABLED
          value: "true"
        # docker-in-docker needs privileged mode
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/tpu-ssh
          name: tpu-ssh
        - mountPath: /docker-graph
          name: docker-graph
      volumes:
      - name: tpu-ssh
        secret:
          defaultMode: 0400
          secretName: ssh-knative
      - name: docker-graph
        emptyDir: {}
