# This file contains Kubernetes YAML files for the most important prow
# components. Don't edit resources in this file. Instead, pull them out into
# their own files.
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: prowjobs.prow.k8s.io
spec:
  group: prow.k8s.io
  version: v1
  names:
    kind: ProwJob
    singular: prowjob
    plural: prowjobs
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            max_concurrency:
              type: integer
              minimum: 0
            type:
              type: string
              enum:
              - "presubmit"
              - "postsubmit"
              - "periodic"
              - "batch"
        status:
          properties:
            state:
              type: string
              enum:
              - "triggered"
              - "pending"
              - "success"
              - "failure"
              - "aborted"
              - "error"
          anyOf:
          - not:
              properties:
                state:
                  type: string
                  enum:
                  - "success"
                  - "failure"
                  - "error"
                  - "aborted"
          - required:
            - completionTime
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: hook
  labels:
    app: hook
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: hook
    spec:
      terminationGracePeriodSeconds: 180
      containers:
      - name: hook
        image: gcr.io/k8s-prow/hook:v20180510-83d462f87
        imagePullPolicy: Always
        args:
        - --dry-run=false
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: hmac
          mountPath: /etc/webhook
          readOnly: true
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: plugins
          mountPath: /etc/plugins
          readOnly: true
      volumes:
      - name: hmac
        secret:
          secretName: hmac-token
      - name: oauth
        secret:
          secretName: oauth-token
      - name: config
        configMap:
          name: config
      - name: plugins
        configMap:
          name: plugins
---
apiVersion: v1
kind: Service
metadata:
  name: hook
spec:
  selector:
    app: hook
  ports:
  - port: 8888
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: plank
  labels:
    app: plank
spec:
  replicas: 1 # Do not scale up.
  template:
    metadata:
      labels:
        app: plank
    spec:
      containers:
      - name: plank
        image: gcr.io/k8s-prow/plank:v20180512-0255926d1
        args:
        - --dry-run=false
        - --tot-url=http://tot
        volumeMounts:
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: oauth
        secret:
          secretName: oauth-token
      - name: config
        configMap:
          name: config
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sinker
  labels:
    app: sinker
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sinker
    spec:
      containers:
      - name: sinker
        image: gcr.io/k8s-prow/sinker:v20180510-83d462f87
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: deck
  labels:
    app: deck
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: deck
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: deck
        image: gcr.io/k8s-prow/deck:v20180510-83d462f87
        args:
        - --hook-url=http://hook:8888/plugin-help
        - --tide-url=http://tide/
        ports:
          - name: http
            containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config
---
apiVersion: v1
kind: Service
metadata:
  name: deck
spec:
  selector:
    app: deck
  ports:
  - port: 80
    targetPort: 8080
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: horologium
  labels:
    app: horologium
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: horologium
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: horologium
        image: gcr.io/k8s-prow/horologium:v20180510-83d462f87
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config

# Ingresses
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: deck-ing
  annotations:
    kubernetes.io/ingress.class: "gce"
spec:
  tls:
  - secretName: tls-secret
    hosts:
    - prow-internal.gcpnode.com
  rules:
  - host: prow-internal.gcpnode.com
    http:
      paths:
      - path: /*
        backend:
          serviceName: deck
          servicePort: 80
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: hook-ing
  annotations:
    kubernetes.io/ingress.global-static-ip-name: prow-hook
    kubernetes.io/tls-acme: "true"
    kubernetes.io/ingress.class: "gce"
spec:
  tls:
  - secretName: prow-tls
    hosts:
    - google-prow.elafros.dev
  rules:
  - host: google-prow.elafros.dev
    http:
      paths:
      - path: /hook
        backend:
          serviceName: hook
          servicePort: 8888

# kube-lego resources
---
apiVersion: v1
kind: Namespace
metadata:
  name: kube-lego
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-lego
  namespace: kube-lego
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: kube-lego
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  verbs:
  - create
  - get
  - delete
  - update
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - update
  - create
  - list
  - patch
  - delete
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - secrets
  verbs:
  - get
  - create
  - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: kube-lego
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-lego
subjects:
  - kind: ServiceAccount
    name: kube-lego
    namespace: kube-lego
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-lego
  namespace: kube-lego
spec:
  replicas: 1
  template:
    metadata:
      labels:
        # Required for the auto-create kube-lego-nginx service to work.
        app: kube-lego
    spec:
      serviceAccountName: kube-lego
      containers:
      - name: kube-lego
        image: jetstack/kube-lego:0.1.5
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: LEGO_LOG_LEVEL
          value: info
        - name: LEGO_EMAIL
          value: "colew@google.com"
        - name: LEGO_URL
          value: "https://acme-v01.api.letsencrypt.org/directory"
        - name: LEGO_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 1
---
apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    app: tot
  name: tot-storage
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  gcePersistentDisk:
    pdName: tot-storage
    fsType: ext4
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  labels:
    app: tot
  name: tot-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: tot
  labels:
    app: tot
spec:
  replicas: 1  # one canonical source of build numbers
  template:
    metadata:
      labels:
        app: tot
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: tot
        image: gcr.io/k8s-prow/tot:v20180510-83d462f87
        imagePullPolicy: Always
        args:
        - -storage=/store/tot.json
        - -fallback
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - mountPath: /store
          name: tot-volume
      volumes:
        - name: tot-volume
          persistentVolumeClaim:
            claimName: tot-storage
---
apiVersion: v1
kind: Service
metadata:
  name: tot
spec:
  selector:
    app: tot
  ports:
  - port: 80
    targetPort: 8888
  type: NodePort
---
# start gerrit
apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    app: gerrit
  name: gerrit-storage
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  gcePersistentDisk:
    pdName: gerrit-storage
    fsType: ext4
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  labels:
    app: gerrit
  name: gerrit-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: gerrit
  labels:
    app: gerrit
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: gerrit
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: gerrit
        image: gcr.io/gke-prow/gerrit:latest # TODO(senlu): create a stable tag
        imagePullPolicy: Always
        args:
        - ./gerrit
        - --storage=/store/gerrit
        - --gerrit-instance=https://gke-internal-review.googlesource.com
        - --gerrit-projects=test-infra
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
        - mountPath: /store
          name: gerrit-volume
      volumes:
      - name: config
        configMap:
          name: config
      - name: gerrit-volume
        persistentVolumeClaim:
          claimName: gerrit-storage
# end gerrit
---
#tide
apiVersion: v1
kind: Service
metadata:
  name: tide
spec:
  selector:
    app: tide
  ports:
  - port: 80
    targetPort: 8888
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: tide
  labels:
    app: tide
spec:
  replicas: 1 # Do not scale up.
  template:
    metadata:
      labels:
        app: tide
    spec:
      containers:
      - name: tide
        image: gcr.io/k8s-prow/tide:v20180510-83d462f87
        args:
        - --dry-run=false
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: oauth
        secret:
          secretName: oauth-token
      - name: config
        configMap:
          name: config
#end tide

